/**
 * SendinBlue API
 * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  | 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@sendinblue.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.6
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CreateModel', 'model/CreateSmsCampaign', 'model/CreatedProcessId', 'model/ErrorModel', 'model/GetSmsCampaign', 'model/GetSmsCampaigns', 'model/PostSendSmsTestFailed', 'model/RequestSmsRecipientExport', 'model/SendReport', 'model/SendTestSms', 'model/UpdateCampaignStatus', 'model/UpdateSmsCampaign'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/CreateModel'), require('../model/CreateSmsCampaign'), require('../model/CreatedProcessId'), require('../model/ErrorModel'), require('../model/GetSmsCampaign'), require('../model/GetSmsCampaigns'), require('../model/PostSendSmsTestFailed'), require('../model/RequestSmsRecipientExport'), require('../model/SendReport'), require('../model/SendTestSms'), require('../model/UpdateCampaignStatus'), require('../model/UpdateSmsCampaign'));
  } else {
    // Browser globals (root is window)
    if (!root.SendinBlueApi) {
      root.SendinBlueApi = {};
    }
    root.SendinBlueApi.SMSCampaignsApi = factory(root.SendinBlueApi.ApiClient, root.SendinBlueApi.CreateModel, root.SendinBlueApi.CreateSmsCampaign, root.SendinBlueApi.CreatedProcessId, root.SendinBlueApi.ErrorModel, root.SendinBlueApi.GetSmsCampaign, root.SendinBlueApi.GetSmsCampaigns, root.SendinBlueApi.PostSendSmsTestFailed, root.SendinBlueApi.RequestSmsRecipientExport, root.SendinBlueApi.SendReport, root.SendinBlueApi.SendTestSms, root.SendinBlueApi.UpdateCampaignStatus, root.SendinBlueApi.UpdateSmsCampaign);
  }
}(this, function(ApiClient, CreateModel, CreateSmsCampaign, CreatedProcessId, ErrorModel, GetSmsCampaign, GetSmsCampaigns, PostSendSmsTestFailed, RequestSmsRecipientExport, SendReport, SendTestSms, UpdateCampaignStatus, UpdateSmsCampaign) {
  'use strict';

  /**
   * SMSCampaigns service.
   * @module api/SMSCampaignsApi
   * @version 3.0.0
   */

  /**
   * Constructs a new SMSCampaignsApi. 
   * @alias module:api/SMSCampaignsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createSmsCampaign operation.
     * @callback module:api/SMSCampaignsApi~createSmsCampaignCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an SMS campaign
     * @param {module:model/CreateSmsCampaign} createSmsCampaign Values to create an SMS Campaign
     * @param {module:api/SMSCampaignsApi~createSmsCampaignCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateModel}
     */
    this.createSmsCampaign = function(createSmsCampaign, callback) {
      var postBody = createSmsCampaign;

      // verify the required parameter 'createSmsCampaign' is set
      if (createSmsCampaign === undefined || createSmsCampaign === null) {
        throw new Error("Missing the required parameter 'createSmsCampaign' when calling createSmsCampaign");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CreateModel;

      return this.apiClient.callApi(
        '/smsCampaigns', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSmsCampaign operation.
     * @callback module:api/SMSCampaignsApi~deleteSmsCampaignCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the SMS campaign
     * @param {Number} campaignId id of the SMS campaign
     * @param {module:api/SMSCampaignsApi~deleteSmsCampaignCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteSmsCampaign = function(campaignId, callback) {
      var postBody = null;

      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling deleteSmsCampaign");
      }


      var pathParams = {
        'campaignId': campaignId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/smsCampaigns/{campaignId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSmsCampaign operation.
     * @callback module:api/SMSCampaignsApi~getSmsCampaignCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSmsCampaign} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an SMS campaign
     * @param {Number} campaignId id of the SMS campaign
     * @param {module:api/SMSCampaignsApi~getSmsCampaignCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetSmsCampaign}
     */
    this.getSmsCampaign = function(campaignId, callback) {
      var postBody = null;

      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling getSmsCampaign");
      }


      var pathParams = {
        'campaignId': campaignId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetSmsCampaign;

      return this.apiClient.callApi(
        '/smsCampaigns/{campaignId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSmsCampaigns operation.
     * @callback module:api/SMSCampaignsApi~getSmsCampaignsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSmsCampaigns} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the informations for all your created SMS campaigns
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.status Status of campaign.
     * @param {Date} opts.startDate Mandatory if endDate is used. Starting (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the sent sms campaigns. Prefer to pass your timezone in date-time format for accurate result ( only available if either &#39;status&#39; not passed and if passed is set to &#39;sent&#39; )
     * @param {Date} opts.endDate Mandatory if startDate is used. Ending (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the sent sms campaigns. Prefer to pass your timezone in date-time format for accurate result ( only available if either &#39;status&#39; not passed and if passed is set to &#39;sent&#39; )
     * @param {Number} opts.limit Number limitation for the result returned (default to 500)
     * @param {Number} opts.offset Beginning point in the list to retrieve from. (default to 0)
     * @param {module:api/SMSCampaignsApi~getSmsCampaignsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetSmsCampaigns}
     */
    this.getSmsCampaigns = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'status': opts['status'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'limit': opts['limit'],
        'offset': opts['offset'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetSmsCampaigns;

      return this.apiClient.callApi(
        '/smsCampaigns', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the requestSmsRecipientExport operation.
     * @callback module:api/SMSCampaignsApi~requestSmsRecipientExportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreatedProcessId} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Exports the recipients of the specified campaign.
     * It returns the background process ID which on completion calls the notify URL that you have set in the input.
     * @param {Number} campaignId id of the campaign
     * @param {Object} opts Optional parameters
     * @param {module:model/RequestSmsRecipientExport} opts.recipientExport Values to send for a recipient export request
     * @param {module:api/SMSCampaignsApi~requestSmsRecipientExportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreatedProcessId}
     */
    this.requestSmsRecipientExport = function(campaignId, opts, callback) {
      opts = opts || {};
      var postBody = opts['recipientExport'];

      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling requestSmsRecipientExport");
      }


      var pathParams = {
        'campaignId': campaignId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CreatedProcessId;

      return this.apiClient.callApi(
        '/smsCampaigns/{campaignId}/exportRecipients', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the sendSmsCampaignNow operation.
     * @callback module:api/SMSCampaignsApi~sendSmsCampaignNowCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send your SMS campaign immediately
     * @param {Number} campaignId id of the campaign
     * @param {module:api/SMSCampaignsApi~sendSmsCampaignNowCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.sendSmsCampaignNow = function(campaignId, callback) {
      var postBody = null;

      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling sendSmsCampaignNow");
      }


      var pathParams = {
        'campaignId': campaignId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/smsCampaigns/{campaignId}/sendNow', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the sendSmsReport operation.
     * @callback module:api/SMSCampaignsApi~sendSmsReportCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send report of SMS campaigns
     * Send report of Sent and Archived campaign, to the specified email addresses, with respective data and a pdf attachment in detail.
     * @param {Number} campaignId id of the campaign
     * @param {module:model/SendReport} sendReport Values for send a report
     * @param {module:api/SMSCampaignsApi~sendSmsReportCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.sendSmsReport = function(campaignId, sendReport, callback) {
      var postBody = sendReport;

      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling sendSmsReport");
      }

      // verify the required parameter 'sendReport' is set
      if (sendReport === undefined || sendReport === null) {
        throw new Error("Missing the required parameter 'sendReport' when calling sendSmsReport");
      }


      var pathParams = {
        'campaignId': campaignId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/smsCampaigns/{campaignId}/sendReport', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the sendTestSms operation.
     * @callback module:api/SMSCampaignsApi~sendTestSmsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send an SMS
     * @param {Number} campaignId Id of the SMS campaign
     * @param {module:model/SendTestSms} phoneNumber Mobile number of the recipient with the country code. This number must belong to one of your contacts in SendinBlue account and must not be blacklisted
     * @param {module:api/SMSCampaignsApi~sendTestSmsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.sendTestSms = function(campaignId, phoneNumber, callback) {
      var postBody = phoneNumber;

      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling sendTestSms");
      }

      // verify the required parameter 'phoneNumber' is set
      if (phoneNumber === undefined || phoneNumber === null) {
        throw new Error("Missing the required parameter 'phoneNumber' when calling sendTestSms");
      }


      var pathParams = {
        'campaignId': campaignId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/smsCampaigns/{campaignId}/sendTest', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSmsCampaign operation.
     * @callback module:api/SMSCampaignsApi~updateSmsCampaignCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an SMS campaign
     * @param {Number} campaignId id of the SMS campaign
     * @param {module:model/UpdateSmsCampaign} updateSmsCampaign Values to update an SMS Campaign
     * @param {module:api/SMSCampaignsApi~updateSmsCampaignCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateSmsCampaign = function(campaignId, updateSmsCampaign, callback) {
      var postBody = updateSmsCampaign;

      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling updateSmsCampaign");
      }

      // verify the required parameter 'updateSmsCampaign' is set
      if (updateSmsCampaign === undefined || updateSmsCampaign === null) {
        throw new Error("Missing the required parameter 'updateSmsCampaign' when calling updateSmsCampaign");
      }


      var pathParams = {
        'campaignId': campaignId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/smsCampaigns/{campaignId}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSmsCampaignStatus operation.
     * @callback module:api/SMSCampaignsApi~updateSmsCampaignStatusCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the campaign status
     * @param {Number} campaignId id of the campaign
     * @param {module:model/UpdateCampaignStatus} status Status of the campaign.
     * @param {module:api/SMSCampaignsApi~updateSmsCampaignStatusCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateSmsCampaignStatus = function(campaignId, status, callback) {
      var postBody = status;

      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling updateSmsCampaignStatus");
      }

      // verify the required parameter 'status' is set
      if (status === undefined || status === null) {
        throw new Error("Missing the required parameter 'status' when calling updateSmsCampaignStatus");
      }


      var pathParams = {
        'campaignId': campaignId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/smsCampaigns/{campaignId}/status', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
