/**
 * SendinBlue API
 * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  | 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@sendinblue.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.6
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AddChildDomain', 'model/AddCredits', 'model/CreateChild', 'model/CreateReseller', 'model/ErrorModel', 'model/GetChildDomains', 'model/GetChildInfo', 'model/GetChildrenList', 'model/GetSsoToken', 'model/ManageIp', 'model/RemainingCreditModel', 'model/RemoveCredits', 'model/UpdateChild', 'model/UpdateChildAccountStatus', 'model/UpdateChildDomain'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AddChildDomain'), require('../model/AddCredits'), require('../model/CreateChild'), require('../model/CreateReseller'), require('../model/ErrorModel'), require('../model/GetChildDomains'), require('../model/GetChildInfo'), require('../model/GetChildrenList'), require('../model/GetSsoToken'), require('../model/ManageIp'), require('../model/RemainingCreditModel'), require('../model/RemoveCredits'), require('../model/UpdateChild'), require('../model/UpdateChildAccountStatus'), require('../model/UpdateChildDomain'));
  } else {
    // Browser globals (root is window)
    if (!root.SendinBlueApi) {
      root.SendinBlueApi = {};
    }
    root.SendinBlueApi.ResellerApi = factory(root.SendinBlueApi.ApiClient, root.SendinBlueApi.AddChildDomain, root.SendinBlueApi.AddCredits, root.SendinBlueApi.CreateChild, root.SendinBlueApi.CreateReseller, root.SendinBlueApi.ErrorModel, root.SendinBlueApi.GetChildDomains, root.SendinBlueApi.GetChildInfo, root.SendinBlueApi.GetChildrenList, root.SendinBlueApi.GetSsoToken, root.SendinBlueApi.ManageIp, root.SendinBlueApi.RemainingCreditModel, root.SendinBlueApi.RemoveCredits, root.SendinBlueApi.UpdateChild, root.SendinBlueApi.UpdateChildAccountStatus, root.SendinBlueApi.UpdateChildDomain);
  }
}(this, function(ApiClient, AddChildDomain, AddCredits, CreateChild, CreateReseller, ErrorModel, GetChildDomains, GetChildInfo, GetChildrenList, GetSsoToken, ManageIp, RemainingCreditModel, RemoveCredits, UpdateChild, UpdateChildAccountStatus, UpdateChildDomain) {
  'use strict';

  /**
   * Reseller service.
   * @module api/ResellerApi
   * @version 3.0.0
   */

  /**
   * Constructs a new ResellerApi. 
   * @alias module:api/ResellerApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addCredits operation.
     * @callback module:api/ResellerApi~addCreditsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RemainingCreditModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add Email and/or SMS credits to a specific child account
     * @param {String} childAuthKey auth key of reseller&#39;s child
     * @param {module:model/AddCredits} addCredits Values to post to add credit to a specific child account
     * @param {module:api/ResellerApi~addCreditsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RemainingCreditModel}
     */
    this.addCredits = function(childAuthKey, addCredits, callback) {
      var postBody = addCredits;

      // verify the required parameter 'childAuthKey' is set
      if (childAuthKey === undefined || childAuthKey === null) {
        throw new Error("Missing the required parameter 'childAuthKey' when calling addCredits");
      }

      // verify the required parameter 'addCredits' is set
      if (addCredits === undefined || addCredits === null) {
        throw new Error("Missing the required parameter 'addCredits' when calling addCredits");
      }


      var pathParams = {
        'childAuthKey': childAuthKey
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = RemainingCreditModel;

      return this.apiClient.callApi(
        '/reseller/children/{childAuthKey}/credits/add', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the associateIpToChild operation.
     * @callback module:api/ResellerApi~associateIpToChildCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Associate a dedicated IP to the child
     * @param {String} childAuthKey auth key of reseller&#39;s child
     * @param {module:model/ManageIp} ip IP to associate
     * @param {module:api/ResellerApi~associateIpToChildCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.associateIpToChild = function(childAuthKey, ip, callback) {
      var postBody = ip;

      // verify the required parameter 'childAuthKey' is set
      if (childAuthKey === undefined || childAuthKey === null) {
        throw new Error("Missing the required parameter 'childAuthKey' when calling associateIpToChild");
      }

      // verify the required parameter 'ip' is set
      if (ip === undefined || ip === null) {
        throw new Error("Missing the required parameter 'ip' when calling associateIpToChild");
      }


      var pathParams = {
        'childAuthKey': childAuthKey
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/reseller/children/{childAuthKey}/ips/associate', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createChildDomain operation.
     * @callback module:api/ResellerApi~createChildDomainCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a domain for a child account
     * @param {String} childAuthKey auth key of reseller&#39;s child
     * @param {module:model/AddChildDomain} addChildDomain Sender domain to add for a specific child account
     * @param {module:api/ResellerApi~createChildDomainCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.createChildDomain = function(childAuthKey, addChildDomain, callback) {
      var postBody = addChildDomain;

      // verify the required parameter 'childAuthKey' is set
      if (childAuthKey === undefined || childAuthKey === null) {
        throw new Error("Missing the required parameter 'childAuthKey' when calling createChildDomain");
      }

      // verify the required parameter 'addChildDomain' is set
      if (addChildDomain === undefined || addChildDomain === null) {
        throw new Error("Missing the required parameter 'addChildDomain' when calling createChildDomain");
      }


      var pathParams = {
        'childAuthKey': childAuthKey
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/reseller/children/{childAuthKey}/domains', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createResellerChild operation.
     * @callback module:api/ResellerApi~createResellerChildCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateReseller} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a reseller child
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateChild} opts.resellerChild reseller child to add
     * @param {module:api/ResellerApi~createResellerChildCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateReseller}
     */
    this.createResellerChild = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['resellerChild'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CreateReseller;

      return this.apiClient.callApi(
        '/reseller/children', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteChildDomain operation.
     * @callback module:api/ResellerApi~deleteChildDomainCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the sender domain of the reseller child based on the childAuthKey and domainName passed
     * @param {String} childAuthKey auth key of reseller&#39;s child
     * @param {String} domainName Pass the existing domain that needs to be deleted
     * @param {module:api/ResellerApi~deleteChildDomainCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteChildDomain = function(childAuthKey, domainName, callback) {
      var postBody = null;

      // verify the required parameter 'childAuthKey' is set
      if (childAuthKey === undefined || childAuthKey === null) {
        throw new Error("Missing the required parameter 'childAuthKey' when calling deleteChildDomain");
      }

      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling deleteChildDomain");
      }


      var pathParams = {
        'childAuthKey': childAuthKey,
        'domainName': domainName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/reseller/children/{childAuthKey}/domains/{domainName}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteResellerChild operation.
     * @callback module:api/ResellerApi~deleteResellerChildCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a single reseller child based on the childAuthKey supplied
     * @param {String} childAuthKey auth key of reseller&#39;s child
     * @param {module:api/ResellerApi~deleteResellerChildCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteResellerChild = function(childAuthKey, callback) {
      var postBody = null;

      // verify the required parameter 'childAuthKey' is set
      if (childAuthKey === undefined || childAuthKey === null) {
        throw new Error("Missing the required parameter 'childAuthKey' when calling deleteResellerChild");
      }


      var pathParams = {
        'childAuthKey': childAuthKey
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/reseller/children/{childAuthKey}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the dissociateIpFromChild operation.
     * @callback module:api/ResellerApi~dissociateIpFromChildCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Dissociate a dedicated IP to the child
     * @param {String} childAuthKey auth key of reseller&#39;s child
     * @param {module:model/ManageIp} ip IP to dissociate
     * @param {module:api/ResellerApi~dissociateIpFromChildCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.dissociateIpFromChild = function(childAuthKey, ip, callback) {
      var postBody = ip;

      // verify the required parameter 'childAuthKey' is set
      if (childAuthKey === undefined || childAuthKey === null) {
        throw new Error("Missing the required parameter 'childAuthKey' when calling dissociateIpFromChild");
      }

      // verify the required parameter 'ip' is set
      if (ip === undefined || ip === null) {
        throw new Error("Missing the required parameter 'ip' when calling dissociateIpFromChild");
      }


      var pathParams = {
        'childAuthKey': childAuthKey
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/reseller/children/{childAuthKey}/ips/dissociate', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getChildDomains operation.
     * @callback module:api/ResellerApi~getChildDomainsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetChildDomains} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all the sender domains of a specific child account
     * @param {String} childAuthKey auth key of reseller&#39;s child
     * @param {module:api/ResellerApi~getChildDomainsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetChildDomains}
     */
    this.getChildDomains = function(childAuthKey, callback) {
      var postBody = null;

      // verify the required parameter 'childAuthKey' is set
      if (childAuthKey === undefined || childAuthKey === null) {
        throw new Error("Missing the required parameter 'childAuthKey' when calling getChildDomains");
      }


      var pathParams = {
        'childAuthKey': childAuthKey
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetChildDomains;

      return this.apiClient.callApi(
        '/reseller/children/{childAuthKey}/domains', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getChildInfo operation.
     * @callback module:api/ResellerApi~getChildInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetChildInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the info about a specific child account
     * @param {String} childAuthKey auth key of reseller&#39;s child
     * @param {module:api/ResellerApi~getChildInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetChildInfo}
     */
    this.getChildInfo = function(childAuthKey, callback) {
      var postBody = null;

      // verify the required parameter 'childAuthKey' is set
      if (childAuthKey === undefined || childAuthKey === null) {
        throw new Error("Missing the required parameter 'childAuthKey' when calling getChildInfo");
      }


      var pathParams = {
        'childAuthKey': childAuthKey
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetChildInfo;

      return this.apiClient.callApi(
        '/reseller/children/{childAuthKey}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getResellerChilds operation.
     * @callback module:api/ResellerApi~getResellerChildsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetChildrenList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the list of all reseller&#39;s children accounts
     * @param {module:api/ResellerApi~getResellerChildsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetChildrenList}
     */
    this.getResellerChilds = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetChildrenList;

      return this.apiClient.callApi(
        '/reseller/children', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSsoToken operation.
     * @callback module:api/ResellerApi~getSsoTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSsoToken} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get session token to access Sendinblue (SSO)
     * It returns a session [token] which will remain valid for a short period of time. A child account will be able to access a white-labeled section by using the following url pattern &#x3D;&gt; https:/email.mydomain.com/login/sso?token&#x3D;[token]
     * @param {String} childAuthKey auth key of reseller&#39;s child
     * @param {module:api/ResellerApi~getSsoTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetSsoToken}
     */
    this.getSsoToken = function(childAuthKey, callback) {
      var postBody = null;

      // verify the required parameter 'childAuthKey' is set
      if (childAuthKey === undefined || childAuthKey === null) {
        throw new Error("Missing the required parameter 'childAuthKey' when calling getSsoToken");
      }


      var pathParams = {
        'childAuthKey': childAuthKey
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetSsoToken;

      return this.apiClient.callApi(
        '/reseller/children/{childAuthKey}/auth', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the removeCredits operation.
     * @callback module:api/ResellerApi~removeCreditsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RemainingCreditModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove Email and/or SMS credits from a specific child account
     * @param {String} childAuthKey auth key of reseller&#39;s child
     * @param {module:model/RemoveCredits} removeCredits Values to post to remove email or SMS credits from a specific child account
     * @param {module:api/ResellerApi~removeCreditsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RemainingCreditModel}
     */
    this.removeCredits = function(childAuthKey, removeCredits, callback) {
      var postBody = removeCredits;

      // verify the required parameter 'childAuthKey' is set
      if (childAuthKey === undefined || childAuthKey === null) {
        throw new Error("Missing the required parameter 'childAuthKey' when calling removeCredits");
      }

      // verify the required parameter 'removeCredits' is set
      if (removeCredits === undefined || removeCredits === null) {
        throw new Error("Missing the required parameter 'removeCredits' when calling removeCredits");
      }


      var pathParams = {
        'childAuthKey': childAuthKey
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = RemainingCreditModel;

      return this.apiClient.callApi(
        '/reseller/children/{childAuthKey}/credits/remove', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateChildAccountStatus operation.
     * @callback module:api/ResellerApi~updateChildAccountStatusCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates infos of reseller&#39;s child account status based on the childAuthKey supplied
     * @param {String} childAuthKey auth key of reseller&#39;s child
     * @param {module:model/UpdateChildAccountStatus} updateChildAccountStatus values to update in child account status
     * @param {module:api/ResellerApi~updateChildAccountStatusCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateChildAccountStatus = function(childAuthKey, updateChildAccountStatus, callback) {
      var postBody = updateChildAccountStatus;

      // verify the required parameter 'childAuthKey' is set
      if (childAuthKey === undefined || childAuthKey === null) {
        throw new Error("Missing the required parameter 'childAuthKey' when calling updateChildAccountStatus");
      }

      // verify the required parameter 'updateChildAccountStatus' is set
      if (updateChildAccountStatus === undefined || updateChildAccountStatus === null) {
        throw new Error("Missing the required parameter 'updateChildAccountStatus' when calling updateChildAccountStatus");
      }


      var pathParams = {
        'childAuthKey': childAuthKey
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/reseller/children/{childAuthKey}/accountStatus', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateChildDomain operation.
     * @callback module:api/ResellerApi~updateChildDomainCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the sender domain of reseller&#39;s child based on the childAuthKey and domainName passed
     * @param {String} childAuthKey auth key of reseller&#39;s child
     * @param {String} domainName Pass the existing domain that needs to be updated
     * @param {module:model/UpdateChildDomain} updateChildDomain value to update for sender domain
     * @param {module:api/ResellerApi~updateChildDomainCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateChildDomain = function(childAuthKey, domainName, updateChildDomain, callback) {
      var postBody = updateChildDomain;

      // verify the required parameter 'childAuthKey' is set
      if (childAuthKey === undefined || childAuthKey === null) {
        throw new Error("Missing the required parameter 'childAuthKey' when calling updateChildDomain");
      }

      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling updateChildDomain");
      }

      // verify the required parameter 'updateChildDomain' is set
      if (updateChildDomain === undefined || updateChildDomain === null) {
        throw new Error("Missing the required parameter 'updateChildDomain' when calling updateChildDomain");
      }


      var pathParams = {
        'childAuthKey': childAuthKey,
        'domainName': domainName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/reseller/children/{childAuthKey}/domains/{domainName}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateResellerChild operation.
     * @callback module:api/ResellerApi~updateResellerChildCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates infos of reseller&#39;s child based on the childAuthKey supplied
     * @param {String} childAuthKey auth key of reseller&#39;s child
     * @param {module:model/UpdateChild} resellerChild values to update in child profile
     * @param {module:api/ResellerApi~updateResellerChildCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateResellerChild = function(childAuthKey, resellerChild, callback) {
      var postBody = resellerChild;

      // verify the required parameter 'childAuthKey' is set
      if (childAuthKey === undefined || childAuthKey === null) {
        throw new Error("Missing the required parameter 'childAuthKey' when calling updateResellerChild");
      }

      // verify the required parameter 'resellerChild' is set
      if (resellerChild === undefined || resellerChild === null) {
        throw new Error("Missing the required parameter 'resellerChild' when calling updateResellerChild");
      }


      var pathParams = {
        'childAuthKey': childAuthKey
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/reseller/children/{childAuthKey}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
