/**
 * SendinBlue API
 * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  | 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@sendinblue.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.6
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AddContactToList', 'model/CreateAttribute', 'model/CreateContact', 'model/CreateList', 'model/CreateModel', 'model/CreateUpdateContactModel', 'model/CreateUpdateFolder', 'model/CreatedProcessId', 'model/ErrorModel', 'model/GetAttributes', 'model/GetContactCampaignStats', 'model/GetContacts', 'model/GetExtendedContactDetails', 'model/GetExtendedList', 'model/GetFolder', 'model/GetFolderLists', 'model/GetFolders', 'model/GetLists', 'model/PostContactInfo', 'model/RemoveContactFromList', 'model/RequestContactExport', 'model/RequestContactImport', 'model/UpdateAttribute', 'model/UpdateContact', 'model/UpdateList'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AddContactToList'), require('../model/CreateAttribute'), require('../model/CreateContact'), require('../model/CreateList'), require('../model/CreateModel'), require('../model/CreateUpdateContactModel'), require('../model/CreateUpdateFolder'), require('../model/CreatedProcessId'), require('../model/ErrorModel'), require('../model/GetAttributes'), require('../model/GetContactCampaignStats'), require('../model/GetContacts'), require('../model/GetExtendedContactDetails'), require('../model/GetExtendedList'), require('../model/GetFolder'), require('../model/GetFolderLists'), require('../model/GetFolders'), require('../model/GetLists'), require('../model/PostContactInfo'), require('../model/RemoveContactFromList'), require('../model/RequestContactExport'), require('../model/RequestContactImport'), require('../model/UpdateAttribute'), require('../model/UpdateContact'), require('../model/UpdateList'));
  } else {
    // Browser globals (root is window)
    if (!root.SendinBlueApi) {
      root.SendinBlueApi = {};
    }
    root.SendinBlueApi.ContactsApi = factory(root.SendinBlueApi.ApiClient, root.SendinBlueApi.AddContactToList, root.SendinBlueApi.CreateAttribute, root.SendinBlueApi.CreateContact, root.SendinBlueApi.CreateList, root.SendinBlueApi.CreateModel, root.SendinBlueApi.CreateUpdateContactModel, root.SendinBlueApi.CreateUpdateFolder, root.SendinBlueApi.CreatedProcessId, root.SendinBlueApi.ErrorModel, root.SendinBlueApi.GetAttributes, root.SendinBlueApi.GetContactCampaignStats, root.SendinBlueApi.GetContacts, root.SendinBlueApi.GetExtendedContactDetails, root.SendinBlueApi.GetExtendedList, root.SendinBlueApi.GetFolder, root.SendinBlueApi.GetFolderLists, root.SendinBlueApi.GetFolders, root.SendinBlueApi.GetLists, root.SendinBlueApi.PostContactInfo, root.SendinBlueApi.RemoveContactFromList, root.SendinBlueApi.RequestContactExport, root.SendinBlueApi.RequestContactImport, root.SendinBlueApi.UpdateAttribute, root.SendinBlueApi.UpdateContact, root.SendinBlueApi.UpdateList);
  }
}(this, function(ApiClient, AddContactToList, CreateAttribute, CreateContact, CreateList, CreateModel, CreateUpdateContactModel, CreateUpdateFolder, CreatedProcessId, ErrorModel, GetAttributes, GetContactCampaignStats, GetContacts, GetExtendedContactDetails, GetExtendedList, GetFolder, GetFolderLists, GetFolders, GetLists, PostContactInfo, RemoveContactFromList, RequestContactExport, RequestContactImport, UpdateAttribute, UpdateContact, UpdateList) {
  'use strict';

  /**
   * Contacts service.
   * @module api/ContactsApi
   * @version 3.0.0
   */

  /**
   * Constructs a new ContactsApi. 
   * @alias module:api/ContactsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addContactToList operation.
     * @callback module:api/ContactsApi~addContactToListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PostContactInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add existing contacts to a list
     * @param {Number} listId Id of the list
     * @param {module:model/AddContactToList} contactEmails Emails addresses of the contacts
     * @param {module:api/ContactsApi~addContactToListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PostContactInfo}
     */
    this.addContactToList = function(listId, contactEmails, callback) {
      var postBody = contactEmails;

      // verify the required parameter 'listId' is set
      if (listId === undefined || listId === null) {
        throw new Error("Missing the required parameter 'listId' when calling addContactToList");
      }

      // verify the required parameter 'contactEmails' is set
      if (contactEmails === undefined || contactEmails === null) {
        throw new Error("Missing the required parameter 'contactEmails' when calling addContactToList");
      }


      var pathParams = {
        'listId': listId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PostContactInfo;

      return this.apiClient.callApi(
        '/contacts/lists/{listId}/contacts/add', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createAttribute operation.
     * @callback module:api/ContactsApi~createAttributeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates contact attribute
     * @param {module:model/String} attributeCategory Category of the attribute
     * @param {String} attributeName Name of the attribute
     * @param {module:model/CreateAttribute} createAttribute Values to create an attribute
     * @param {module:api/ContactsApi~createAttributeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.createAttribute = function(attributeCategory, attributeName, createAttribute, callback) {
      var postBody = createAttribute;

      // verify the required parameter 'attributeCategory' is set
      if (attributeCategory === undefined || attributeCategory === null) {
        throw new Error("Missing the required parameter 'attributeCategory' when calling createAttribute");
      }

      // verify the required parameter 'attributeName' is set
      if (attributeName === undefined || attributeName === null) {
        throw new Error("Missing the required parameter 'attributeName' when calling createAttribute");
      }

      // verify the required parameter 'createAttribute' is set
      if (createAttribute === undefined || createAttribute === null) {
        throw new Error("Missing the required parameter 'createAttribute' when calling createAttribute");
      }


      var pathParams = {
        'attributeCategory': attributeCategory,
        'attributeName': attributeName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/contacts/attributes/{attributeCategory}/{attributeName}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createContact operation.
     * @callback module:api/ContactsApi~createContactCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateUpdateContactModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a contact
     * @param {module:model/CreateContact} createContact Values to create a contact
     * @param {module:api/ContactsApi~createContactCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateUpdateContactModel}
     */
    this.createContact = function(createContact, callback) {
      var postBody = createContact;

      // verify the required parameter 'createContact' is set
      if (createContact === undefined || createContact === null) {
        throw new Error("Missing the required parameter 'createContact' when calling createContact");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CreateUpdateContactModel;

      return this.apiClient.callApi(
        '/contacts', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createFolder operation.
     * @callback module:api/ContactsApi~createFolderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a folder
     * @param {module:model/CreateUpdateFolder} createFolder Name of the folder
     * @param {module:api/ContactsApi~createFolderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateModel}
     */
    this.createFolder = function(createFolder, callback) {
      var postBody = createFolder;

      // verify the required parameter 'createFolder' is set
      if (createFolder === undefined || createFolder === null) {
        throw new Error("Missing the required parameter 'createFolder' when calling createFolder");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CreateModel;

      return this.apiClient.callApi(
        '/contacts/folders', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createList operation.
     * @callback module:api/ContactsApi~createListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a list
     * @param {module:model/CreateList} createList Values to create a list
     * @param {module:api/ContactsApi~createListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateModel}
     */
    this.createList = function(createList, callback) {
      var postBody = createList;

      // verify the required parameter 'createList' is set
      if (createList === undefined || createList === null) {
        throw new Error("Missing the required parameter 'createList' when calling createList");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CreateModel;

      return this.apiClient.callApi(
        '/contacts/lists', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAttribute operation.
     * @callback module:api/ContactsApi~deleteAttributeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an attribute
     * @param {module:model/String} attributeCategory Category of the attribute
     * @param {String} attributeName Name of the existing attribute
     * @param {module:api/ContactsApi~deleteAttributeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteAttribute = function(attributeCategory, attributeName, callback) {
      var postBody = null;

      // verify the required parameter 'attributeCategory' is set
      if (attributeCategory === undefined || attributeCategory === null) {
        throw new Error("Missing the required parameter 'attributeCategory' when calling deleteAttribute");
      }

      // verify the required parameter 'attributeName' is set
      if (attributeName === undefined || attributeName === null) {
        throw new Error("Missing the required parameter 'attributeName' when calling deleteAttribute");
      }


      var pathParams = {
        'attributeCategory': attributeCategory,
        'attributeName': attributeName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/contacts/attributes/{attributeCategory}/{attributeName}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteContact operation.
     * @callback module:api/ContactsApi~deleteContactCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a contact
     * @param {String} email Email (urlencoded) of the contact
     * @param {module:api/ContactsApi~deleteContactCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteContact = function(email, callback) {
      var postBody = null;

      // verify the required parameter 'email' is set
      if (email === undefined || email === null) {
        throw new Error("Missing the required parameter 'email' when calling deleteContact");
      }


      var pathParams = {
        'email': email
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/contacts/{email}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteFolder operation.
     * @callback module:api/ContactsApi~deleteFolderCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a folder (and all its lists)
     * @param {Number} folderId Id of the folder
     * @param {module:api/ContactsApi~deleteFolderCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteFolder = function(folderId, callback) {
      var postBody = null;

      // verify the required parameter 'folderId' is set
      if (folderId === undefined || folderId === null) {
        throw new Error("Missing the required parameter 'folderId' when calling deleteFolder");
      }


      var pathParams = {
        'folderId': folderId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/contacts/folders/{folderId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteList operation.
     * @callback module:api/ContactsApi~deleteListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a list
     * @param {Number} listId Id of the list
     * @param {module:api/ContactsApi~deleteListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteList = function(listId, callback) {
      var postBody = null;

      // verify the required parameter 'listId' is set
      if (listId === undefined || listId === null) {
        throw new Error("Missing the required parameter 'listId' when calling deleteList");
      }


      var pathParams = {
        'listId': listId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/contacts/lists/{listId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAttributes operation.
     * @callback module:api/ContactsApi~getAttributesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAttributes} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all attributes
     * @param {module:api/ContactsApi~getAttributesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAttributes}
     */
    this.getAttributes = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetAttributes;

      return this.apiClient.callApi(
        '/contacts/attributes', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getContactInfo operation.
     * @callback module:api/ContactsApi~getContactInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetExtendedContactDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves contact informations
     * @param {String} email Email (urlencoded) of the contact OR its SMS attribute value
     * @param {module:api/ContactsApi~getContactInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetExtendedContactDetails}
     */
    this.getContactInfo = function(email, callback) {
      var postBody = null;

      // verify the required parameter 'email' is set
      if (email === undefined || email === null) {
        throw new Error("Missing the required parameter 'email' when calling getContactInfo");
      }


      var pathParams = {
        'email': email
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetExtendedContactDetails;

      return this.apiClient.callApi(
        '/contacts/{email}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getContactStats operation.
     * @callback module:api/ContactsApi~getContactStatsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetContactCampaignStats} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the campaigns statistics for a contact
     * @param {String} email Email address (urlencoded) of the contact
     * @param {module:api/ContactsApi~getContactStatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetContactCampaignStats}
     */
    this.getContactStats = function(email, callback) {
      var postBody = null;

      // verify the required parameter 'email' is set
      if (email === undefined || email === null) {
        throw new Error("Missing the required parameter 'email' when calling getContactStats");
      }


      var pathParams = {
        'email': email
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetContactCampaignStats;

      return this.apiClient.callApi(
        '/contacts/{email}/campaignStats', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getContacts operation.
     * @callback module:api/ContactsApi~getContactsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetContacts} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the contacts
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Number of documents per page (default to 50)
     * @param {Number} opts.offset Index of the first document of the page (default to 0)
     * @param {Date} opts.modifiedSince Filter (urlencoded) the contacts modified after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). Prefer to pass your timezone in date-time format for accurate result.
     * @param {module:api/ContactsApi~getContactsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetContacts}
     */
    this.getContacts = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'modifiedSince': opts['modifiedSince'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetContacts;

      return this.apiClient.callApi(
        '/contacts', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getContactsFromList operation.
     * @callback module:api/ContactsApi~getContactsFromListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetContacts} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the contacts in a list
     * @param {Number} listId Id of the list
     * @param {Object} opts Optional parameters
     * @param {Date} opts.modifiedSince Filter (urlencoded) the contacts modified after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). Prefer to pass your timezone in date-time format for accurate result.
     * @param {Number} opts.limit Number of documents per page (default to 50)
     * @param {Number} opts.offset Index of the first document of the page (default to 0)
     * @param {module:api/ContactsApi~getContactsFromListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetContacts}
     */
    this.getContactsFromList = function(listId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'listId' is set
      if (listId === undefined || listId === null) {
        throw new Error("Missing the required parameter 'listId' when calling getContactsFromList");
      }


      var pathParams = {
        'listId': listId
      };
      var queryParams = {
        'modifiedSince': opts['modifiedSince'],
        'limit': opts['limit'],
        'offset': opts['offset'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetContacts;

      return this.apiClient.callApi(
        '/contacts/lists/{listId}/contacts', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getFolder operation.
     * @callback module:api/ContactsApi~getFolderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetFolder} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns folder details
     * @param {Number} folderId id of the folder
     * @param {module:api/ContactsApi~getFolderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetFolder}
     */
    this.getFolder = function(folderId, callback) {
      var postBody = null;

      // verify the required parameter 'folderId' is set
      if (folderId === undefined || folderId === null) {
        throw new Error("Missing the required parameter 'folderId' when calling getFolder");
      }


      var pathParams = {
        'folderId': folderId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetFolder;

      return this.apiClient.callApi(
        '/contacts/folders/{folderId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getFolderLists operation.
     * @callback module:api/ContactsApi~getFolderListsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetFolderLists} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the lists in a folder
     * @param {Number} folderId Id of the folder
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Number of documents per page (default to 10)
     * @param {Number} opts.offset Index of the first document of the page (default to 0)
     * @param {module:api/ContactsApi~getFolderListsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetFolderLists}
     */
    this.getFolderLists = function(folderId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'folderId' is set
      if (folderId === undefined || folderId === null) {
        throw new Error("Missing the required parameter 'folderId' when calling getFolderLists");
      }


      var pathParams = {
        'folderId': folderId
      };
      var queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetFolderLists;

      return this.apiClient.callApi(
        '/contacts/folders/{folderId}/lists', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getFolders operation.
     * @callback module:api/ContactsApi~getFoldersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetFolders} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the folders
     * @param {Number} limit Number of documents per page
     * @param {Number} offset Index of the first document of the page
     * @param {module:api/ContactsApi~getFoldersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetFolders}
     */
    this.getFolders = function(limit, offset, callback) {
      var postBody = null;

      // verify the required parameter 'limit' is set
      if (limit === undefined || limit === null) {
        throw new Error("Missing the required parameter 'limit' when calling getFolders");
      }

      // verify the required parameter 'offset' is set
      if (offset === undefined || offset === null) {
        throw new Error("Missing the required parameter 'offset' when calling getFolders");
      }


      var pathParams = {
      };
      var queryParams = {
        'limit': limit,
        'offset': offset,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetFolders;

      return this.apiClient.callApi(
        '/contacts/folders', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getList operation.
     * @callback module:api/ContactsApi~getListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetExtendedList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the details of a list
     * @param {Number} listId Id of the list
     * @param {module:api/ContactsApi~getListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetExtendedList}
     */
    this.getList = function(listId, callback) {
      var postBody = null;

      // verify the required parameter 'listId' is set
      if (listId === undefined || listId === null) {
        throw new Error("Missing the required parameter 'listId' when calling getList");
      }


      var pathParams = {
        'listId': listId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetExtendedList;

      return this.apiClient.callApi(
        '/contacts/lists/{listId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getLists operation.
     * @callback module:api/ContactsApi~getListsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetLists} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the lists
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Number of documents per page (default to 10)
     * @param {Number} opts.offset Index of the first document of the page (default to 0)
     * @param {module:api/ContactsApi~getListsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetLists}
     */
    this.getLists = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetLists;

      return this.apiClient.callApi(
        '/contacts/lists', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the importContacts operation.
     * @callback module:api/ContactsApi~importContactsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreatedProcessId} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Import contacts
     * It returns the background process ID which on completion calls the notify URL that you have set in the input.
     * @param {module:model/RequestContactImport} requestContactImport Values to import contacts in Sendinblue. To know more about the expected format, please have a look at &#x60;&#x60;https://help.sendinblue.com/hc/en-us/articles/209499265-Build-contacts-lists-for-your-email-marketing-campaigns&#x60;&#x60;
     * @param {module:api/ContactsApi~importContactsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreatedProcessId}
     */
    this.importContacts = function(requestContactImport, callback) {
      var postBody = requestContactImport;

      // verify the required parameter 'requestContactImport' is set
      if (requestContactImport === undefined || requestContactImport === null) {
        throw new Error("Missing the required parameter 'requestContactImport' when calling importContacts");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CreatedProcessId;

      return this.apiClient.callApi(
        '/contacts/import', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the removeContactFromList operation.
     * @callback module:api/ContactsApi~removeContactFromListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PostContactInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove existing contacts from a list
     * @param {Number} listId Id of the list
     * @param {module:model/RemoveContactFromList} contactEmails Emails adresses of the contact
     * @param {module:api/ContactsApi~removeContactFromListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PostContactInfo}
     */
    this.removeContactFromList = function(listId, contactEmails, callback) {
      var postBody = contactEmails;

      // verify the required parameter 'listId' is set
      if (listId === undefined || listId === null) {
        throw new Error("Missing the required parameter 'listId' when calling removeContactFromList");
      }

      // verify the required parameter 'contactEmails' is set
      if (contactEmails === undefined || contactEmails === null) {
        throw new Error("Missing the required parameter 'contactEmails' when calling removeContactFromList");
      }


      var pathParams = {
        'listId': listId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PostContactInfo;

      return this.apiClient.callApi(
        '/contacts/lists/{listId}/contacts/remove', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the requestContactExport operation.
     * @callback module:api/ContactsApi~requestContactExportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreatedProcessId} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Export contacts
     * It returns the background process ID which on completion calls the notify URL that you have set in the input. File will be available in csv.
     * @param {module:model/RequestContactExport} requestContactExport Values to request a contact export
     * @param {module:api/ContactsApi~requestContactExportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreatedProcessId}
     */
    this.requestContactExport = function(requestContactExport, callback) {
      var postBody = requestContactExport;

      // verify the required parameter 'requestContactExport' is set
      if (requestContactExport === undefined || requestContactExport === null) {
        throw new Error("Missing the required parameter 'requestContactExport' when calling requestContactExport");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CreatedProcessId;

      return this.apiClient.callApi(
        '/contacts/export', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAttribute operation.
     * @callback module:api/ContactsApi~updateAttributeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates contact attribute
     * @param {module:model/String} attributeCategory Category of the attribute
     * @param {String} attributeName Name of the existing attribute
     * @param {module:model/UpdateAttribute} updateAttribute Values to update an attribute
     * @param {module:api/ContactsApi~updateAttributeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateAttribute = function(attributeCategory, attributeName, updateAttribute, callback) {
      var postBody = updateAttribute;

      // verify the required parameter 'attributeCategory' is set
      if (attributeCategory === undefined || attributeCategory === null) {
        throw new Error("Missing the required parameter 'attributeCategory' when calling updateAttribute");
      }

      // verify the required parameter 'attributeName' is set
      if (attributeName === undefined || attributeName === null) {
        throw new Error("Missing the required parameter 'attributeName' when calling updateAttribute");
      }

      // verify the required parameter 'updateAttribute' is set
      if (updateAttribute === undefined || updateAttribute === null) {
        throw new Error("Missing the required parameter 'updateAttribute' when calling updateAttribute");
      }


      var pathParams = {
        'attributeCategory': attributeCategory,
        'attributeName': attributeName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/contacts/attributes/{attributeCategory}/{attributeName}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateContact operation.
     * @callback module:api/ContactsApi~updateContactCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a contact
     * @param {String} email Email (urlencoded) of the contact
     * @param {module:model/UpdateContact} updateContact Values to update a contact
     * @param {module:api/ContactsApi~updateContactCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateContact = function(email, updateContact, callback) {
      var postBody = updateContact;

      // verify the required parameter 'email' is set
      if (email === undefined || email === null) {
        throw new Error("Missing the required parameter 'email' when calling updateContact");
      }

      // verify the required parameter 'updateContact' is set
      if (updateContact === undefined || updateContact === null) {
        throw new Error("Missing the required parameter 'updateContact' when calling updateContact");
      }


      var pathParams = {
        'email': email
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/contacts/{email}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateFolder operation.
     * @callback module:api/ContactsApi~updateFolderCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a contact folder
     * @param {Number} folderId Id of the folder
     * @param {module:model/CreateUpdateFolder} updateFolder Name of the folder
     * @param {module:api/ContactsApi~updateFolderCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateFolder = function(folderId, updateFolder, callback) {
      var postBody = updateFolder;

      // verify the required parameter 'folderId' is set
      if (folderId === undefined || folderId === null) {
        throw new Error("Missing the required parameter 'folderId' when calling updateFolder");
      }

      // verify the required parameter 'updateFolder' is set
      if (updateFolder === undefined || updateFolder === null) {
        throw new Error("Missing the required parameter 'updateFolder' when calling updateFolder");
      }


      var pathParams = {
        'folderId': folderId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/contacts/folders/{folderId}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateList operation.
     * @callback module:api/ContactsApi~updateListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a list
     * @param {Number} listId Id of the list
     * @param {module:model/UpdateList} updateList Values to update a list
     * @param {module:api/ContactsApi~updateListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateList = function(listId, updateList, callback) {
      var postBody = updateList;

      // verify the required parameter 'listId' is set
      if (listId === undefined || listId === null) {
        throw new Error("Missing the required parameter 'listId' when calling updateList");
      }

      // verify the required parameter 'updateList' is set
      if (updateList === undefined || updateList === null) {
        throw new Error("Missing the required parameter 'updateList' when calling updateList");
      }


      var pathParams = {
        'listId': listId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/contacts/lists/{listId}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
